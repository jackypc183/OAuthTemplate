<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Template</name>
    </assembly>
    <members>
        <member name="M:Template.IoCConfig.Configure(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            設定註冊服務
            </summary>
            <param name="Configuration">設定檔</param>
            <param name="services">服務集合</param>
            <returns></returns>
        </member>
        <member name="P:Template.Models.Line.LineProfileResultDto.userId">
            <summary>
            使用者id
            </summary>
        </member>
        <member name="T:Template.Repository.EFGenericRepository`1">
            <summary>
            實作Entity Framework Generic Repository 的 Class。
            </summary>
            <typeparam name="TEntity">EF Model 裡面的Type</typeparam>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,NLog.ILogger)">
            <summary>
            建構EF一個Entity的Repository，需傳入此Entity的Context。
            </summary>
            <param name="inContext">Entity所在的Context</param>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Create(`0)">
            <summary>
            新增一筆資料到資料庫。
            </summary>
            <param name="entity">要新增到資料的庫的Entity</param>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Read(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            取得第一筆符合條件的內容。如果符合條件有多筆，也只取得第一筆。
            </summary>
            <param name="predicate">要取得的Where條件。</param>
            <returns>取得第一筆符合條件的內容。</returns>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Reads">
            <summary>
            取得Entity全部筆數的IQueryable。
            </summary>
            <returns>Entity全部筆數的IQueryable。</returns>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Update(`0)">
            <summary>
            更新一筆Entity內容。
            </summary>
            <param name="entity">要更新的內容</param>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            更新一筆Entity的內容。排除更新指定的Property。
            </summary>
            <param name="entity">要更新的內容。</param>
            <param name="updateProperties">需要更新的欄位。</param>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.Delete(`0)">
            <summary>
            刪除一筆資料內容。
            </summary>
            <param name="entity">要被刪除的Entity。</param>
        </member>
        <member name="M:Template.Repository.EFGenericRepository`1.SaveChanges">
            <summary>
            儲存異動。
            </summary>
        </member>
        <member name="T:Template.Repository.IRepository`1">
            <summary>
            代表一個Repository的interface。
            </summary>
            <typeparam name="T">任意model的class</typeparam>
        </member>
        <member name="M:Template.Repository.IRepository`1.Create(`0)">
            <summary>
            新增一筆資料。
            </summary>
            <param name="entity">要新增到的Entity</param>
        </member>
        <member name="M:Template.Repository.IRepository`1.Read(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            取得第一筆符合條件的內容。如果符合條件有多筆，也只取得第一筆。
            </summary>
            <param name="predicate">要取得的Where條件。</param>
            <returns>取得第一筆符合條件的內容。</returns>
        </member>
        <member name="M:Template.Repository.IRepository`1.Reads">
            <summary>
            取得Entity全部筆數的IQueryable。
            </summary>
            <returns>Entity全部筆數的IQueryable。</returns>
        </member>
        <member name="M:Template.Repository.IRepository`1.Update(`0)">
            <summary>
            更新一筆資料的內容。
            </summary>
            <param name="entity">要更新的內容</param>
        </member>
        <member name="M:Template.Repository.IRepository`1.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            更新一筆Entity的內容。只更新有指定的Property。
            </summary>
            <param name="entity">要更新的內容。</param>
            <param name="updateProperties">需要更新的欄位。</param>
        </member>
        <member name="M:Template.Repository.IRepository`1.Delete(`0)">
            <summary>
            刪除一筆資料內容。
            </summary>
            <param name="entity">要被刪除的Entity。</param>
        </member>
        <member name="M:Template.Repository.IRepository`1.SaveChanges">
            <summary>
            儲存異動。
            </summary>
        </member>
        <member name="T:Template.Repository.IUnitOfWork">
            <summary>
            實作Unit Of Work的interface。
            </summary>
        </member>
        <member name="M:Template.Repository.IUnitOfWork.Save">
            <summary>
            儲存所有異動。
            </summary>
        </member>
        <member name="M:Template.Repository.IUnitOfWork.Repository``1">
            <summary>
            取得某一個Entity的Repository。
            如果沒有取過，會initialise一個
            如果有就取得之前initialise的那個。
            </summary>
            <typeparam name="T">此Context裡面的Entity Type</typeparam>
            <returns>Entity的Repository</returns>
        </member>
        <member name="T:Template.Repository.UnitOfWork">
            <summary>
            實作Entity Framework Unit Of Work的class
            </summary>
        </member>
        <member name="M:Template.Repository.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            設定此Unit of work(UOF)的Context。
            </summary>
            <param name="context">設定UOF的context</param>
        </member>
        <member name="M:Template.Repository.UnitOfWork.Save">
            <summary>
            儲存所有異動。
            </summary>
        </member>
        <member name="M:Template.Repository.UnitOfWork.Dispose">
            <summary>
            清除此Class的資源。
            </summary>
        </member>
        <member name="M:Template.Repository.UnitOfWork.Dispose(System.Boolean)">
            <summary>
            清除此Class的資源。
            </summary>
            <param name="disposing">是否在清理中？</param>
        </member>
        <member name="M:Template.Repository.UnitOfWork.Repository``1">
            <summary>
            取得某一個Entity的Repository。
            如果沒有取過，會initialise一個
            如果有就取得之前initialise的那個。
            </summary>
            <typeparam name="T">此Context裡面的Entity Type</typeparam>
            <returns>Entity的Repository</returns>
        </member>
    </members>
</doc>
